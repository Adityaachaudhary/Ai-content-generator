{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Get user from localStorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n\n// Get current user\nexport const getCurrentUser = createAsyncThunk('auth/getCurrentUser', async (_, thunkAPI) => {\n  try {\n    var _thunkAPI$getState$au;\n    const token = (_thunkAPI$getState$au = thunkAPI.getState().auth.user) === null || _thunkAPI$getState$au === void 0 ? void 0 : _thunkAPI$getState$au.token;\n    if (!token) {\n      return thunkAPI.rejectWithValue('No token found');\n    }\n    const config = {\n      headers: {\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.get(`${API_URL}/auth/me`, config);\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.msg || error.message || error.toString();\n\n    // Logout user if token is invalid\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('user');\n    }\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user (when receiving token from Google OAuth callback)\nexport const loginWithToken = createAsyncThunk('auth/loginWithToken', async (token, thunkAPI) => {\n  try {\n    // Save the token to localStorage\n    const userData = {\n      token\n    };\n    localStorage.setItem('user', JSON.stringify(userData));\n\n    // Get user details\n    const config = {\n      headers: {\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.get(`${API_URL}/auth/me`, config);\n\n    // Return user data along with token\n    return {\n      ...response.data,\n      token\n    };\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.msg || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Logout user\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  localStorage.removeItem('user');\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getCurrentUser.pending, state => {\n      state.isLoading = true;\n    }).addCase(getCurrentUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = {\n        ...state.user,\n        ...action.payload\n      };\n    }).addCase(getCurrentUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(loginWithToken.pending, state => {\n      state.isLoading = true;\n    }).addCase(loginWithToken.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(loginWithToken.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","getCurrentUser","_","thunkAPI","_thunkAPI$getState$au","token","getState","auth","rejectWithValue","config","headers","response","get","data","error","msg","toString","status","removeItem","loginWithToken","userData","setItem","stringify","logout","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/Users/harsh/Desktop/Ai-content generator/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Get user from localStorage\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n};\r\n\r\n// Get current user\r\nexport const getCurrentUser = createAsyncThunk(\r\n  'auth/getCurrentUser',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user?.token;\r\n      \r\n      if (!token) {\r\n        return thunkAPI.rejectWithValue('No token found');\r\n      }\r\n\r\n      const config = {\r\n        headers: {\r\n          'x-auth-token': token,\r\n        },\r\n      };\r\n\r\n      const response = await axios.get(`${API_URL}/auth/me`, config);\r\n      return response.data;\r\n    } catch (error) {\r\n      const message = \r\n        (error.response && \r\n          error.response.data && \r\n          error.response.data.msg) ||\r\n        error.message ||\r\n        error.toString();\r\n      \r\n      // Logout user if token is invalid\r\n      if (error.response && error.response.status === 401) {\r\n        localStorage.removeItem('user');\r\n      }\r\n\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Login user (when receiving token from Google OAuth callback)\r\nexport const loginWithToken = createAsyncThunk(\r\n  'auth/loginWithToken',\r\n  async (token, thunkAPI) => {\r\n    try {\r\n      // Save the token to localStorage\r\n      const userData = { token };\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n\r\n      // Get user details\r\n      const config = {\r\n        headers: {\r\n          'x-auth-token': token,\r\n        },\r\n      };\r\n\r\n      const response = await axios.get(`${API_URL}/auth/me`, config);\r\n      \r\n      // Return user data along with token\r\n      return { ...response.data, token };\r\n    } catch (error) {\r\n      const message = \r\n        (error.response && \r\n          error.response.data && \r\n          error.response.data.msg) ||\r\n        error.message ||\r\n        error.toString();\r\n      \r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Logout user\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n  localStorage.removeItem('user');\r\n});\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = false;\r\n      state.isError = false;\r\n      state.message = '';\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getCurrentUser.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getCurrentUser.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = { ...state.user, ...action.payload };\r\n      })\r\n      .addCase(getCurrentUser.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      .addCase(loginWithToken.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(loginWithToken.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(loginWithToken.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      })\r\n      .addCase(logout.fulfilled, (state) => {\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}