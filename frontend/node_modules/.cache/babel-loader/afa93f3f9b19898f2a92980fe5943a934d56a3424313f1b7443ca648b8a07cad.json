{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport User from '../../models/user';\n\n// Use relative URL to leverage the proxy configuration in package.json\nconst API_URL = '/api/payments';\nconst initialState = {\n  plans: [],\n  userSubscription: null,\n  orderId: null,\n  paymentStatus: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n\n// Get subscription plans\nexport const getSubscriptionPlans = createAsyncThunk('subscription/getPlans', async (_, thunkAPI) => {\n  try {\n    const response = await axios.get(`${API_URL}/plans`);\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.msg || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Create PayPal order\nexport const createPayPalOrder = createAsyncThunk('subscription/createOrder', async (planId, thunkAPI) => {\n  try {\n    var _thunkAPI$getState$au;\n    const token = (_thunkAPI$getState$au = thunkAPI.getState().auth.user) === null || _thunkAPI$getState$au === void 0 ? void 0 : _thunkAPI$getState$au.token;\n    if (!token) {\n      return thunkAPI.rejectWithValue('Authentication token missing');\n    }\n    const config = {\n      headers: {\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.post(`${API_URL}/create-order`, {\n      planId\n    }, config);\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.msg || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Capture PayPal order\nexport const capturePayPalOrder = createAsyncThunk('subscription/captureOrder', async (orderId, thunkAPI) => {\n  try {\n    var _thunkAPI$getState$au2;\n    const token = (_thunkAPI$getState$au2 = thunkAPI.getState().auth.user) === null || _thunkAPI$getState$au2 === void 0 ? void 0 : _thunkAPI$getState$au2.token;\n    if (!token) {\n      return thunkAPI.rejectWithValue('Authentication token missing');\n    }\n    const config = {\n      headers: {\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.post(`${API_URL}/capture-order`, {\n      orderId\n    }, config);\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.msg || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get user subscription details\nexport const getUserSubscription = createAsyncThunk('subscription/getUserSubscription', async (_, thunkAPI) => {\n  try {\n    var _thunkAPI$getState$au3;\n    const token = (_thunkAPI$getState$au3 = thunkAPI.getState().auth.user) === null || _thunkAPI$getState$au3 === void 0 ? void 0 : _thunkAPI$getState$au3.token;\n    if (!token) {\n      return thunkAPI.rejectWithValue('Authentication token missing');\n    }\n    const config = {\n      headers: {\n        'x-auth-token': token\n      }\n    };\n    const response = await axios.get(`${API_URL}/subscription`, config);\n    return response.data;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.msg || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Update user subscription status and limits after successful payment\nconst handleCompletedPayment = async (user, planId) => {\n  try {\n    // Determine new usage limits based on plan\n    let usageLimit = 10; // Default for free plan\n\n    if (planId === 'basic') {\n      usageLimit = 50;\n    } else if (planId === 'premium') {\n      usageLimit = 200;\n    }\n\n    // Calculate subscription end date (30 days from now)\n    const endDate = new Date();\n    endDate.setDate(endDate.getDate() + 30);\n\n    // Update user subscription\n    await User.findByIdAndUpdate(user._id, {\n      'subscription.status': planId,\n      'subscription.planId': planId,\n      'subscription.startDate': new Date(),\n      'subscription.endDate': endDate,\n      'subscription.isActive': true,\n      'subscription.pendingOrderId': null,\n      'subscription.pendingPlanId': null,\n      usageLimit: usageLimit,\n      // Reset usage count when subscription is purchased\n      usageCount: 0\n    });\n    return true;\n  } catch (error) {\n    console.error('Error updating subscription:', error);\n    throw error;\n  }\n};\nexport const subscriptionSlice = createSlice({\n  name: 'subscription',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n      state.message = '';\n    },\n    clearPaymentStatus: state => {\n      state.paymentStatus = null;\n      state.orderId = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getSubscriptionPlans.pending, state => {\n      state.isLoading = true;\n    }).addCase(getSubscriptionPlans.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.plans = action.payload;\n    }).addCase(getSubscriptionPlans.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createPayPalOrder.pending, state => {\n      state.isLoading = true;\n    }).addCase(createPayPalOrder.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.orderId = action.payload.orderId;\n    }).addCase(createPayPalOrder.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(capturePayPalOrder.pending, state => {\n      state.isLoading = true;\n    }).addCase(capturePayPalOrder.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.paymentStatus = action.payload.status;\n      // Update subscription details after successful payment\n      if (action.payload.success) {\n        state.userSubscription = {\n          status: action.payload.planId,\n          isActive: true\n        };\n      }\n    }).addCase(capturePayPalOrder.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getUserSubscription.pending, state => {\n      state.isLoading = true;\n    }).addCase(getUserSubscription.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.userSubscription = action.payload.subscription;\n    }).addCase(getUserSubscription.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset,\n  clearPaymentStatus\n} = subscriptionSlice.actions;\nexport default subscriptionSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","User","API_URL","initialState","plans","userSubscription","orderId","paymentStatus","isError","isSuccess","isLoading","message","getSubscriptionPlans","_","thunkAPI","response","get","data","error","msg","toString","rejectWithValue","createPayPalOrder","planId","_thunkAPI$getState$au","token","getState","auth","user","config","headers","post","capturePayPalOrder","_thunkAPI$getState$au2","getUserSubscription","_thunkAPI$getState$au3","handleCompletedPayment","usageLimit","endDate","Date","setDate","getDate","findByIdAndUpdate","_id","usageCount","console","subscriptionSlice","name","reducers","reset","state","clearPaymentStatus","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","status","success","isActive","subscription","actions","reducer"],"sources":["C:/Users/harsh/Desktop/Ai-content generator/frontend/src/features/subscription/subscriptionSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport User from '../../models/user';\r\n\r\n// Use relative URL to leverage the proxy configuration in package.json\r\nconst API_URL = '/api/payments';\r\n\r\nconst initialState = {\r\n  plans: [],\r\n  userSubscription: null,\r\n  orderId: null,\r\n  paymentStatus: null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n};\r\n\r\n// Get subscription plans\r\nexport const getSubscriptionPlans = createAsyncThunk(\r\n  'subscription/getPlans',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/plans`);\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.msg) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Create PayPal order\r\nexport const createPayPalOrder = createAsyncThunk(\r\n  'subscription/createOrder',\r\n  async (planId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user?.token;\r\n      \r\n      if (!token) {\r\n        return thunkAPI.rejectWithValue('Authentication token missing');\r\n      }\r\n\r\n      const config = {\r\n        headers: {\r\n          'x-auth-token': token,\r\n        },\r\n      };\r\n\r\n      const response = await axios.post(\r\n        `${API_URL}/create-order`,\r\n        { planId },\r\n        config\r\n      );\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.msg) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Capture PayPal order\r\nexport const capturePayPalOrder = createAsyncThunk(\r\n  'subscription/captureOrder',\r\n  async (orderId, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user?.token;\r\n      \r\n      if (!token) {\r\n        return thunkAPI.rejectWithValue('Authentication token missing');\r\n      }\r\n\r\n      const config = {\r\n        headers: {\r\n          'x-auth-token': token,\r\n        },\r\n      };\r\n\r\n      const response = await axios.post(\r\n        `${API_URL}/capture-order`,\r\n        { orderId },\r\n        config\r\n      );\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.msg) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Get user subscription details\r\nexport const getUserSubscription = createAsyncThunk(\r\n  'subscription/getUserSubscription',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.user?.token;\r\n      \r\n      if (!token) {\r\n        return thunkAPI.rejectWithValue('Authentication token missing');\r\n      }\r\n\r\n      const config = {\r\n        headers: {\r\n          'x-auth-token': token,\r\n        },\r\n      };\r\n\r\n      const response = await axios.get(`${API_URL}/subscription`, config);\r\n      return response.data;\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.msg) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n\r\n// Update user subscription status and limits after successful payment\r\nconst handleCompletedPayment = async (user, planId) => {\r\n  try {\r\n    // Determine new usage limits based on plan\r\n    let usageLimit = 10; // Default for free plan\r\n    \r\n    if (planId === 'basic') {\r\n      usageLimit = 50;\r\n    } else if (planId === 'premium') {\r\n      usageLimit = 200;\r\n    }\r\n    \r\n    // Calculate subscription end date (30 days from now)\r\n    const endDate = new Date();\r\n    endDate.setDate(endDate.getDate() + 30);\r\n    \r\n    // Update user subscription\r\n    await User.findByIdAndUpdate(user._id, {\r\n      'subscription.status': planId,\r\n      'subscription.planId': planId,\r\n      'subscription.startDate': new Date(),\r\n      'subscription.endDate': endDate,\r\n      'subscription.isActive': true,\r\n      'subscription.pendingOrderId': null,\r\n      'subscription.pendingPlanId': null,\r\n      usageLimit: usageLimit,\r\n      // Reset usage count when subscription is purchased\r\n      usageCount: 0\r\n    });\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating subscription:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const subscriptionSlice = createSlice({\r\n  name: 'subscription',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isSuccess = false;\r\n      state.isError = false;\r\n      state.message = '';\r\n    },\r\n    clearPaymentStatus: (state) => {\r\n      state.paymentStatus = null;\r\n      state.orderId = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getSubscriptionPlans.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getSubscriptionPlans.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.plans = action.payload;\r\n      })\r\n      .addCase(getSubscriptionPlans.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(createPayPalOrder.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(createPayPalOrder.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.orderId = action.payload.orderId;\r\n      })\r\n      .addCase(createPayPalOrder.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(capturePayPalOrder.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(capturePayPalOrder.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.paymentStatus = action.payload.status;\r\n        // Update subscription details after successful payment\r\n        if (action.payload.success) {\r\n          state.userSubscription = {\r\n            status: action.payload.planId,\r\n            isActive: true\r\n          };\r\n        }\r\n      })\r\n      .addCase(capturePayPalOrder.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(getUserSubscription.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(getUserSubscription.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.userSubscription = action.payload.subscription;\r\n      })\r\n      .addCase(getUserSubscription.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset, clearPaymentStatus } = subscriptionSlice.actions;\r\nexport default subscriptionSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}